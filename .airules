# pairusuo 项目 AI 协作与设计原则（.airules）

本文件用于规范本项目的人机协作方式、设计原则与默认需求，AI 参与开发时需优先遵循。

## 1. 通用沟通与默认需求
- 【语言】默认使用简体中文进行问答与提交说明。
- 【风格】回答要简洁、要点式为主；必要时给出文件路径与函数名，使用反引号标注，如 `app/globals.css`、`components/header.tsx`。
- 【安全】在执行可能有破坏性的操作（删除、重写大量文件、安装依赖、网络请求）前需明确说明影响并征求确认。
- 【可运行性】提交代码必须可直接运行；缺失的依赖、导入、脚本需一并补齐。
- 【变更说明】每次变更请在回复中包含“变更摘要”和“下一步建议”。
- 【版本控制】AI主要是修改代码，若要提交代码到GitHub，必须征求人类意见。

## 2. 技术栈与架构约定
- 框架：Next.js 15（App Router），React 19。
- 样式：Tailwind CSS v4 + `@tailwindcss/postcss`；允许使用 v4 新语法：`@theme`、`@custom-variant`、`@utility` 等。
- CSS 规范：已在 `app/globals.css` 使用 `@custom-variant dark (&:is(.dark *));` 定义暗色变体；编辑器若提示“Unknown at rule”应忽略（参见 `.vscode/settings.json`）。
- 动画：`tw-animate-css`。
- 内容处理：MDX、`rehype-pretty-code` + Shiki。
- 国际化：`next-intl`。

## 3. 设计与体验原则（UX/UI）
- 【一致性】颜色、半径、排版等从 `:root` CSS 变量与 `@theme` 导出，避免硬编码；相似功能的组件应保持设计和交互的一致性，统一的样式规范（如标签高度24px），一致的交互模式，规范化的命名约定。
- 【暗色模式】采用类名 `.dark` 切换，所有组件需在深/浅两套变量下对比度合规。
- 【内容宽度】全站统一容器宽度通过 `--content-max` 控制（见 `app/globals.css` 与 `.site-container`）。
- 【可访问性】表单、交互控件须有可见焦点态；图标需标题或 aria-label；颜色对比度≥ WCAG AA；确保网站对所有用户都可访问，语义化HTML标签，合适的颜色对比度，键盘导航支持。
- 【响应式设计】所有界面都应该适配不同屏幕尺寸；使用Tailwind CSS的响应式类，测试移动端和桌面端显示效果，优先考虑移动端体验。
- 【视觉层次】通过视觉设计引导用户注意力；合理的颜色搭配和对比度，清晰的信息架构，适当的空白空间。

## 4. 文案与国际化
- 默认文案中文，使用 `next-intl` 管理多语言。
- UI 字符串不可散落硬编码在组件，需集中于消息文件或常量，并考虑占位符与复数。
- 编辑草稿页面与相关组件必须使用标准国际化（`next-intl`），禁止临时英文/硬编码字符串；新增/修改文案需同步更新 `messages/zh/*.json` 与 `messages/en/*.json`，否则不予合并。
- 【内容分离原则】界面文本和代码逻辑应该分离；所有显示文本通过翻译文件管理，避免硬编码文本内容，支持多语言切换。
- 【文化适应原则】考虑不同文化背景用户的使用习惯；合适的日期时间格式，符合本地化的颜色和图标使用，考虑文本长度变化对布局的影响。

## 5. 代码规范
- TypeScript：开启严格模式；优先使用类型窄化与不可变数据结构。
- 命名：文件/组件使用小驼峰或短横线，React 组件 PascalCase。
- 样式：优先使用 Tailwind 工具类；全局样式仅放在 `app/globals.css` 或少量层（`@layer base/components`）。
- 组件：拆分小而清晰的无副作用 UI 组件；数据获取放在 Server Components 或专用 hooks。
- 目录：公共组件放在 `components/`，页面在 `app/`，公共样式/变量在 `app/globals.css`。
- 【单一职责原则】每个组件应该有明确的单一职责，避免组件功能过度耦合。
- 【可复用性原则】组件设计应考虑在不同场景下的复用性；通过props接收配置参数，支持自定义样式和行为，提供合理的默认值。
- 【类型安全原则】使用TypeScript确保组件接口的类型安全；定义清晰的Props接口，使用泛型增强类型推导，避免使用any类型。

## 6. 质量与工具
- Lint：使用 `eslint`/`eslint-config-next`；编辑器对 Tailwind v4 at-rule 警告需忽略（`.vscode/settings.json` 已配置）。
- 构建：`postcss.config.mjs` 必须包含 `@tailwindcss/postcss` 插件。
- 提交信息：使用约定式提交（feat/fix/docs/refactor/perf/chore/test），附上影响范围和动机。

## 7. 性能与 SEO
- 图片与图标：使用 `next/image` 与 SVG；按需加载、避免阻塞渲染。
- 代码分割：页面级别与组件级别懒加载；谨慎引入体积较大的依赖。
- 元信息：使用 App Router Metadata API 统一管理页面 SEO。
- 【客户端包体积最小化】减少客户端JavaScript包的大小，优先使用服务端渲染；避免在客户端包含大型翻译文件，使用服务端组件处理静态内容，按需加载动态组件。
- 【交互响应速度】用户交互响应时间应控制在合理范围内；自定义组件替代第三方库的慢速默认实现，Tooltip悬浮延迟控制在50ms以内，避免不必要的重渲染。

## 8. 安全与隐私
- 禁止在代码库中硬编码密钥/访问令牌；使用环境变量与安全注入。
- 第三方请求需说明数据出境与存储位置。
- 【服务端渲染优先】敏感数据和业务逻辑必须在服务端处理，避免暴露到客户端；使用 `getTranslations` 进行服务端翻译，禁止使用 `useTranslations` 等客户端钩子。
- 【最小权限暴露】只向客户端传递必要的数据，避免批量传递整个数据集；组件通过 props 接收所需的翻译文本，而不是直接访问翻译函数。
- 【数据边界隔离】不同权限级别的数据应在架构层面进行隔离；管理员功能的翻译文件独立存储，普通用户页面无法访问。
- 【源码安全审查】定期检查客户端打包结果，确保不包含敏感信息（如管理员翻译内容）。

## 9. AI 编程协作规则
- 当用户给出高层目标时：
  1) 先给方案要点与影响面；
  2) 再给最小可行改动；
  3) 必要时分步提交多次小改动，保证可回滚。且提交代码需要征求人类意见。
- 当编辑文件：
  - 使用补丁式修改工具（保持上下文与最小 diff），避免整体覆盖。
  - 变更必须包含必要的 import、类型与依赖更新。
- 当需要运行命令：
  - 仅在安全的情况下自动执行；潜在破坏性命令需请求确认。
- 默认输出：
  - 简洁中文；必要时附代码块与路径；提供“变更摘要/下一步建议”。

### 9.1 命令执行模式（重要约定）
- 由 AI 提供待执行命令，用户本地执行并回传终端输出；AI 默认不在本地自动执行命令（尤其是具有副作用的命令）。
- AI 提供的命令须具备幂等性与安全性，尽量可一次性复制粘贴执行；必要时分步给出，并在每步前说明目的与影响。
- 命令上下文需明确指定工作目录（不使用 `cd` 链），例如：在说明文字中指出“于项目根目录 `~/Documents/GitHub/pairusuo` 执行”。
- 命令模板示例：

```bash
# 目的：推送代码到 GitHub（初始化、设置 remote、提交与推送）
git rev-parse --is-inside-work-tree >/dev/null 2>&1 || git init
git branch -M main
git remote get-url origin >/dev/null 2>&1 \
  && git remote set-url origin https://github.com/pairusuo/pairusuo.git \
  || git remote add origin https://github.com/pairusuo/pairusuo.git
git add -A
git commit -m "chore: initial push" || echo "No changes to commit"
git push -u origin main
```

## 10. 常见约定与片段
- 暗色变体：`@custom-variant dark (&:is(.dark *));`
- 统一容器：使用 `.site-container { max-width: var(--content-max) }`。
- Prose 样式：文章页使用 `.prose` 调整排版与代码块高亮（Shiki）。

## 11. 实施约束与检查清单

### 11.1 翻译系统约束
- ✅ 使用 `getTranslations` 进行服务端翻译
- ❌ 禁止使用 `useTranslations` 等客户端钩子
- ❌ 禁止使用 `NextIntlClientProvider` 批量传递翻译
- ✅ 组件通过 props 接收翻译文本
- ✅ 在 layout 层进行翻译加载和分发

### 11.2 样式与性能约束
- ✅ 使用Tailwind CSS统一样式管理
- ✅ 保持组件尺寸一致性（如标签高度24px）
- ✅ 响应式设计优先
- ❌ 避免内联样式和硬编码尺寸
- ✅ 图片使用Next.js Image组件优化
- ✅ 交互响应时间控制在100ms以内
- ✅ 客户端包体积最小化

### 11.3 安全检查清单
- [ ] 检查客户端打包结果是否包含敏感翻译内容
- [ ] 验证管理员功能翻译未暴露给普通用户
- [ ] 确认所有页面使用服务端翻译
- [ ] 检查组件是否正确接收翻译 props
- [ ] 验证没有使用客户端翻译钩子

### 11.4 性能检查清单
- [ ] 检查页面加载时间是否在可接受范围内
- [ ] 验证图片是否正确优化和懒加载
- [ ] 确认交互响应时间符合标准
- [ ] 检查客户端包体积是否合理
- [ ] 验证移动端性能表现

### 11.5 用户体验检查清单
- [ ] 测试不同屏幕尺寸下的显示效果
- [ ] 验证颜色对比度和可访问性
- [ ] 检查交互的一致性和直观性
- [ ] 确认多语言支持的完整性
- [ ] 测试键盘导航功能

（更新本文件时请保持条目编号与结构，便于 AI 与人类共同维护。）
